{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\laura\\\\testtable2\\\\social-action-backend\\\\client\\\\src\\\\Table.js\";\nimport React, { useState } from \"react\";\nimport { useTable, useFilters, useSortBy } from \"react-table\";\nexport default function Table({\n  columns,\n  data\n}) {\n  const ColumnFilter = ({\n    column: {\n      filterValue,\n      setFilter,\n      filter\n    }\n  }) => {\n    return /*#__PURE__*/React.createElement(CustomInput, {\n      value: filterValue || \"\",\n      onChange: e => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      },\n      placeholder: `Search ${filter ? filter : \"\"}...`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 7\n      }\n    });\n  };\n\n  const filterTypes = {\n    year: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined && Number(filterValue) && new Date(rowValue) && new Date(rowValue).isValid() ? new Date(rowValue).getFullYear() === Number(filterValue) : true;\n      });\n    },\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  };\n  const defaultColumn = {\n    // Let's set up our default Filter UI\n    Filter: ColumnFilter\n  };\n  const [filterInput, setFilterInput] = useState(\"\"); // Use the state and functions returned from useTable to build your UI\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setAllFilters\n  } = useTable({\n    columns,\n    data\n  }, useFilters, useSortBy);\n\n  const handleFilterChange = e => {\n    const value = e.target.value || undefined;\n    setAllFilters([{\n      id: 'firm_name',\n      value: value\n    }, {\n      id: 'work_description',\n      value: value\n    }]);\n    setFilterInput(value);\n  }; // Render the UI for your table\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n    value: filterInput,\n    onChange: handleFilterChange,\n    placeholder: \"Search name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(column.getSortByToggleProps()), {\n    className: column.isSorted ? column.isSortedDesc ? \"sort-desc\" : \"sort-asc\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }), column.render(\"Header\")))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }\n      }), cell.render(\"Cell\"));\n    }));\n  }))));\n}","map":{"version":3,"sources":["C:/Users/laura/testtable2/social-action-backend/client/src/Table.js"],"names":["React","useState","useTable","useFilters","useSortBy","Table","columns","data","ColumnFilter","column","filterValue","setFilter","filter","e","target","value","undefined","filterTypes","year","rows","id","row","rowValue","values","Number","Date","isValid","getFullYear","text","String","toLowerCase","startsWith","defaultColumn","Filter","filterInput","setFilterInput","getTableProps","getTableBodyProps","headerGroups","prepareRow","setAllFilters","handleFilterChange","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","i","getRowProps","cells","cell","getCellProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,SAA/B,QAAgD,aAAhD;AAEA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAf,EAAkC;AAC/C,QAAMC,YAAY,GAAG,CAAC;AAAEC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,SAAf;AAA0BC,MAAAA;AAA1B;AAAV,GAAD,KAAoD;AACvE,wBACE,oBAAC,WAAD;AACE,MAAA,KAAK,EAAEF,WAAW,IAAI,EADxB;AAEE,MAAA,QAAQ,EAAEG,CAAC,IAAI;AACbF,QAAAA,SAAS,CAACE,CAAC,CAACC,MAAF,CAASC,KAAT,IAAkBC,SAAnB,CAAT,CADa,CAC2B;AACzC,OAJH;AAKE,MAAA,WAAW,EAAG,UAASJ,MAAM,GAAGA,MAAH,GAAY,EAAG,KAL9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD,GAVD;;AAWA,QAAMK,WAAW,GAAG;AAClBC,IAAAA,IAAI,EAAE,CAACC,IAAD,EAAOC,EAAP,EAAWV,WAAX,KAA2B;AAC/B,aAAOS,IAAI,CAACP,MAAL,CAAYS,GAAG,IAAI;AACxB,cAAMC,QAAQ,GAAGD,GAAG,CAACE,MAAJ,CAAWH,EAAX,CAAjB;AACA,eAAOE,QAAQ,KAAKN,SAAb,IACLQ,MAAM,CAACd,WAAD,CADD,IAEL,IAAIe,IAAJ,CAASH,QAAT,CAFK,IAGL,IAAIG,IAAJ,CAASH,QAAT,EAAmBI,OAAnB,EAHK,GAIH,IAAID,IAAJ,CAASH,QAAT,EAAmBK,WAAnB,OAAqCH,MAAM,CAACd,WAAD,CAJxC,GAKH,IALJ;AAMD,OARM,CAAP;AASD,KAXiB;AAYlBkB,IAAAA,IAAI,EAAE,CAACT,IAAD,EAAOC,EAAP,EAAWV,WAAX,KAA2B;AAC/B,aAAOS,IAAI,CAACP,MAAL,CAAYS,GAAG,IAAI;AACxB,cAAMC,QAAQ,GAAGD,GAAG,CAACE,MAAJ,CAAWH,EAAX,CAAjB;AACA,eAAOE,QAAQ,KAAKN,SAAb,GACHa,MAAM,CAACP,QAAD,CAAN,CACGQ,WADH,GAEGC,UAFH,CAEcF,MAAM,CAACnB,WAAD,CAAN,CAAoBoB,WAApB,EAFd,CADG,GAIH,IAJJ;AAKD,OAPM,CAAP;AAQD;AArBiB,GAApB;AAuBA,QAAME,aAAa,GAAG;AACpB;AACAC,IAAAA,MAAM,EAAEzB;AAFY,GAAtB;AAIA,QAAM,CAAC0B,WAAD,EAAcC,cAAd,IAAgClC,QAAQ,CAAC,EAAD,CAA9C,CAvC+C,CAwC/C;;AACA,QAAM;AACJmC,IAAAA,aADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA,YAHI;AAIJnB,IAAAA,IAJI;AAKJoB,IAAAA,UALI;AAMJC,IAAAA;AANI,MAOFtC,QAAQ,CACV;AACEI,IAAAA,OADF;AAEEC,IAAAA;AAFF,GADU,EAKVJ,UALU,EAMVC,SANU,CAPZ;;AAgBA,QAAMqC,kBAAkB,GAAG5B,CAAC,IAAI;AAC9B,UAAME,KAAK,GAAGF,CAAC,CAACC,MAAF,CAASC,KAAT,IAAkBC,SAAhC;AACAwB,IAAAA,aAAa,CAAC,CAAC;AAAEpB,MAAAA,EAAE,EAAE,WAAN;AAAmBL,MAAAA,KAAK,EAAEA;AAA1B,KAAD,EAAoC;AAAEK,MAAAA,EAAE,EAAE,kBAAN;AAA0BL,MAAAA,KAAK,EAAEA;AAAjC,KAApC,CAAD,CAAb;AACAoB,IAAAA,cAAc,CAACpB,KAAD,CAAd;AACD,GAJD,CAzD+C,CA+D/C;;;AACA,sBACE,uDACE;AACE,IAAA,KAAK,EAAEmB,WADT;AAEE,IAAA,QAAQ,EAAEO,kBAFZ;AAGE,IAAA,WAAW,EAAE,aAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAME,+CAAWL,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,YAAY,CAACI,GAAb,CAAiBC,WAAW,iBAC3B,4CAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwBjC,MAAM,iBAC7B,4CACMA,MAAM,CAACqC,cAAP,CAAsBrC,MAAM,CAACsC,oBAAP,EAAtB,CADN;AAEE,IAAA,SAAS,EACPtC,MAAM,CAACuC,QAAP,GACIvC,MAAM,CAACwC,YAAP,GACE,WADF,GAEE,UAHN,GAII,EAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUGxC,MAAM,CAACyC,MAAP,CAAc,QAAd,CAVH,CADD,CADH,CADD,CADH,CADF,eAqBE,+CAAWb,iBAAiB,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGlB,IAAI,CAACuB,GAAL,CAAS,CAACrB,GAAD,EAAM8B,CAAN,KAAY;AACpBZ,IAAAA,UAAU,CAAClB,GAAD,CAAV;AACA,wBACE,4CAAQA,GAAG,CAAC+B,WAAJ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACG/B,GAAG,CAACgC,KAAJ,CAAUX,GAAV,CAAcY,IAAI,IAAI;AACrB,0BACE,4CAAQA,IAAI,CAACC,YAAL,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA8BD,IAAI,CAACJ,MAAL,CAAY,MAAZ,CAA9B,CADF;AAGD,KAJA,CADH,CADF;AASD,GAXA,CADH,CArBF,CANF,CADF;AA6CD","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useTable, useFilters, useSortBy } from \"react-table\";\r\n\r\nexport default function Table({ columns, data }) {\r\n  const ColumnFilter = ({ column: { filterValue, setFilter, filter } }) => {\r\n    return (\r\n      <CustomInput\r\n        value={filterValue || \"\"}\r\n        onChange={e => {\r\n          setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\r\n        }}\r\n        placeholder={`Search ${filter ? filter : \"\"}...`}\r\n      />\r\n    );\r\n  };\r\n  const filterTypes = {\r\n    year: (rows, id, filterValue) => {\r\n      return rows.filter(row => {\r\n        const rowValue = row.values[id];\r\n        return rowValue !== undefined &&\r\n          Number(filterValue) &&\r\n          new Date(rowValue) &&\r\n          new Date(rowValue).isValid()\r\n          ? new Date(rowValue).getFullYear() === Number(filterValue)\r\n          : true;\r\n      });\r\n    },\r\n    text: (rows, id, filterValue) => {\r\n      return rows.filter(row => {\r\n        const rowValue = row.values[id];\r\n        return rowValue !== undefined\r\n          ? String(rowValue)\r\n              .toLowerCase()\r\n              .startsWith(String(filterValue).toLowerCase())\r\n          : true;\r\n      });\r\n    }\r\n  };\r\n  const defaultColumn = {\r\n    // Let's set up our default Filter UI\r\n    Filter: ColumnFilter\r\n  };\r\n  const [filterInput, setFilterInput] = useState(\"\");\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    setAllFilters\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data\r\n    },\r\n    useFilters,\r\n    useSortBy\r\n  );\r\n\r\n  const handleFilterChange = e => {\r\n    const value = e.target.value || undefined;\r\n    setAllFilters([{ id: 'firm_name', value: value }, { id: 'work_description', value: value }])\r\n    setFilterInput(value);\r\n  };\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      <input\r\n        value={filterInput}\r\n        onChange={handleFilterChange}\r\n        placeholder={\"Search name\"}\r\n      />\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th\r\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                  className={\r\n                    column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? \"sort-desc\"\r\n                        : \"sort-asc\"\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  {column.render(\"Header\")}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}