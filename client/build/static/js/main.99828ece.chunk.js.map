{"version":3,"sources":["assets/spotlight-photo.jpg","api/index.js","components/Hours.js","components/Location.js","components/Tags.js","components/Spotlight.js","components/Time.js","components/Overview.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","process","PORT","require","config","api","axios","create","baseURL","apis","pipeBis","get","pipeAllBis","Hours","className","Location","Tags","Component","React","Overview","Table","columns","data","useState","filterInput","setFilterInput","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","value","onChange","e","target","undefined","placeholder","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps","Categories","values","category","idx","key","App","useMemo","Header","accessor","Cell","href","setData","useEffect","a","result","console","log","HomePageHeader","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,6C,2PCE9BC,+NAAYC,KAEzBC,EAAQ,IAAUC,SAElB,IAAMC,EAAMC,IAAMC,OAAO,CACrBC,QAASP,oDAWEQ,EALF,CACTC,QAJmB,kBAAML,EAAIM,IAAJ,MAKzBC,WAJsB,kBAAMP,EAAIM,IAAI,iB,4BCPzBE,MAHf,WACE,OAAO,yBAAKC,UAAU,YAAf,sBCEMC,MAHf,WACE,OAAO,yBAAKD,UAAU,YAAf,6BCEME,MAHf,WACE,OAAO,yBAAKF,UAAU,YAAf,qB,uBCOeG,YCJLC,IAAMD,U,YCaVE,I,OCdA,SAASC,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAEvC,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEA,EAOIC,mBACF,CACEL,UACAC,QAEFK,aACAC,aAZAC,EADF,EACEA,cACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,KACAC,EALF,EAKEA,WACAC,EANF,EAMEA,UAiBF,OACE,oCACE,2BACEC,MAAOX,EACPY,SAXqB,SAAAC,GACzB,IAAMF,EAAQE,EAAEC,OAAOH,YAASI,EAChCL,EAAU,YAAaC,GACvBV,EAAeU,IASXK,YAAa,gBAEf,0BAAWX,IACT,+BACGE,EAAaU,KAAI,SAAAC,GAAW,OAC3B,uBAAQA,EAAYC,sBACjBD,EAAYE,QAAQH,KAAI,SAAAI,GAAM,OAC7B,wCACMA,EAAOC,eAAeD,EAAOE,wBADnC,CAEEjC,UACE+B,EAAOG,SACHH,EAAOI,aACL,YACA,WACF,KAGLJ,EAAOK,OAAO,mBAMzB,0BAAWpB,IACRE,EAAKS,KAAI,SAACU,EAAKC,GAEd,OADAnB,EAAWkB,GAET,uBAAQA,EAAIE,cACTF,EAAIG,MAAMb,KAAI,SAAAc,GACb,OACE,uBAAQA,EAAKC,eAAiBD,EAAKL,OAAO,mBCtD9D,IAAMO,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpB,OACE,oCACGA,EAAOjB,KAAI,SAACkB,EAAUC,GACrB,OACE,0BAAMC,IAAKD,EAAK9C,UAAU,SACvB6C,QAmFEG,MAzEf,WACE,IAAMzC,EAAU0C,mBACd,iBAAM,CACJ,CACEC,OAAQ,mBACR3C,QAAS,CACP,CACE2C,OAAQ,OACRC,SAAU,aAEZ,CACED,OAAQ,aACRC,SAAU,aACVC,KAAM,gBAAW/B,EAAX,EAAGoB,KAAQpB,MAAX,OAAyB,kBAAC,EAAD,CAAYuB,OAAQvB,QAIzD,CACE6B,OAAQ,OACR3C,QAAS,CACP,CACE2C,OAAQ,WACRC,SAAU,oBAEZ,CACED,OAAQ,UACRC,SAAU,gBAEZ,CACED,OAAQ,UACRC,SAAU,oBAEZ,CACED,OAAQ,UACRC,SAAU,UACVC,KAAM,SAAA7B,GAAC,OAAG,uBAAG8B,KAAM9B,EAAEF,OAAX,IAAoBE,EAAEF,MAAtB,YAMlB,IAGF,EAAwBZ,mBAAS,IAAjC,mBAAOD,EAAP,KAAa8C,EAAb,KAEAC,qBAAU,WACR,sBAAC,4BAAAC,EAAA,sEACuBjE,EAAIO,aAD3B,OACO2D,EADP,OAECC,QAAQC,IAAIF,GAEZH,EAAQG,EAAOjD,KAAKA,MAJrB,0CAAD,KAMC,IAEH,IAAMoD,EAAiB,WACrB,OACE,4BAAQ5D,UAAU,UAChB,gDAKN,OACE,oCACA,kBAAC4D,EAAD,MACA,yBAAK5D,UAAU,OACb,kBAACM,EAAD,CAAOC,QAASA,EAASC,KAAMA,OCnFjBqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS9B,OACP,kBAAC,IAAM+B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.99828ece.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spotlight-photo.3f85c38b.jpg\";","import axios from 'axios'\n\nconst host = process.env.PORT || 3000;\n\nrequire('dotenv').config();\n\nconst api = axios.create({\n    baseURL: process.env.REACT_APP_BASE_URL + `/api`\n})\n\nexport const pipeBis = () => api.get(`/`)\nexport const pipeAllBis = () => api.get('/businesses')\n\nconst apis = {\n    pipeBis,\n    pipeAllBis\n}\n\nexport default apis","import React from \"react\";\nfunction Hours() {\n  return <div className=\"subtitle\">Hours: 11am - 9pm</div>;\n}\nexport default Hours;\n","import React from \"react\";\nfunction Location() {\n  return <div className=\"subtitle\">Location: Pittsburgh, PA</div>;\n}\nexport default Location;\n","import React from \"react\";\nfunction Tags() {\n  return <div className=\"subtitle\">Tags: food, corn</div>;\n}\nexport default Tags;\n","import React, {Component, Fragment} from \"react\";\nimport api from '../api'\nimport Hours from \"./Hours\";\nimport Location from \"./Location\";\nimport Tags from \"./Tags\";\nimport spotlightphoto from \"../assets/spotlight-photo.jpg\";\n\nimport \"./Spotlight.css\";\n\nclass Spotlight extends Component {\n  constructor(props) {\n      super(props)\n      this.state = {\n          businesses: [],\n          isLoading: false,\n      }\n  }\n\n  componentDidMount = async () => {\n      this.setState({ isLoading: true })\n\n      await api.pipeBis().then(businesses => {\n          this.setState({\n              businesses: businesses.data.data,\n              isLoading: false,\n          })\n      })\n  }\n\n  render() {\n      const { businesses } = this.state\n\n      return (\n        <div className=\"spotlight\">\n        <img src={spotlightphoto} className=\"spotlight-photo\" alt=\"spotlight\"/>\n        <div className=\"spotlight-body\">\n        {businesses.map((id)=>{\n            return (\n              <Fragment>\n                <h2>{id.firm_name}</h2> \n                <Location />\n                <Hours />\n                <div>\n                  <button><a href=\"google.com\">Visit Website</a></button>\n                </div>\n                <Tags />\n              </Fragment>\n            )\n        })}\n        </div>\n\n        <div className=\"scroll\">\n          <span>Dining</span>\n        </div>\n\n      </div>\n      )\n  }\n}\n\nexport default Spotlight;\n","import React from \"react\";\n\n// function Time(props) {\n// \treturn (<h1 className=\"time\">12:01</h1>);\n// }\nclass Time extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date(),\n    });\n  }\n\n  render() {\n    let [month, date, year] = this.state.date\n      .toLocaleDateString(\"en-US\")\n      .split(\"/\");\n    return (\n      <div className=\"time\">\n        <h1>{this.state.date.toLocaleTimeString()}</h1>\n        <h2>\n          {month}/{date}/{year}\n        </h2>\n      </div>\n    );\n  }\n}\nexport default Time;\n","import React from \"react\";\nimport Time from \"./Time\";\nimport Support from \"./Support\";\n\nimport \"./Overview.css\";\n\nfunction Overview(props) {\n  return (\n    <div className=\"overview\">\n      <Time />\n      <div className=\"overview-body\">\n        <Support />\n        <input type=\"text\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Overview;\n","import React, { useState } from \"react\";\nimport { useTable, useFilters, useSortBy } from \"react-table\";\n\n\nexport default function Table({ columns, data }) {\n  \n  const [filterInput, setFilterInput] = useState(\"\");\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    setFilter\n  } = useTable(\n    {\n      columns,\n      data\n    },\n    useFilters,\n    useSortBy\n  );\n\n  const handleFilterChange = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"firm_name\", value);\n    setFilterInput(value);\n  };\n\n  // Render the UI for your table\n  return (\n    <>\n      <input\n        value={filterInput}\n        onChange={handleFilterChange}\n        placeholder={\"Search name\"}\n      />\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  className={\n                    column.isSorted\n                      ? column.isSortedDesc\n                        ? \"sort-desc\"\n                        : \"sort-asc\"\n                      : \"\"\n                  }\n                >\n                  {column.render(\"Header\")}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n}\n","import React, { useMemo, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport api from './api'\n\nimport Spotlight from \"./components/Spotlight\";\nimport Overview from \"./components/Overview\";\nimport \"./App.css\";\n// import { getRandomPhotoURL } from \"./unsplash.js\";\n\nimport Table from \"./Table\";\n//import \"./App.css\";\n\nconst Categories = ({ values }) => {\n  return (\n    <>\n      {values.map((category, idx) => {\n        return (\n          <span key={idx} className=\"badge\">\n            {category}\n          </span>\n        );\n      })}\n    </>\n  );\n};\n\n\n\nfunction App() {\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"Business Details\",\n        columns: [\n          {\n            Header: \"Name\",\n            accessor: \"firm_name\"\n          },\n          {\n            Header: \"Categories\",\n            accessor: \"categories\",\n            Cell: ({ cell: { value } }) => <Categories values={value} />\n          }\n        ]\n      },\n      {\n        Header: \"Info\",\n        columns: [\n          {\n            Header: \"Products\",\n            accessor: \"work_description\"\n          },\n          {\n            Header: \"Phone #\",\n            accessor: \"phone_number\"\n          },\n          {\n            Header: \"Address\",\n            accessor: \"physical_address\"\n          },\n          {\n            Header: \"Website\",\n            accessor: \"website\",\n            Cell: e =><a href={e.value}> {e.value} </a>\n            //Cell: ({ cell: { value } }) => <Genres values={value} />\n          }\n        ]\n      }\n    ],\n    []\n  );\n\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      const result =  await api.pipeAllBis()//await axios(\"https://api.tvmaze.com/search/shows?q=snow\");\n      console.log(result)\n     // console.log(result.data)\n      setData(result.data.data);\n    })();\n  }, []);\n\n  const HomePageHeader = () => {\n    return (\n      <header className=\"header\">\n        <h2>PGH Keeps Tabs</h2>\n      </header>\n    );\n  };\n\n  return (\n    <>\n    <HomePageHeader />\n    <div className=\"App\">\n      <Table columns={columns} data={data} />\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}