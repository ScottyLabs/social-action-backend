{"version":3,"sources":["assets/spotlight-photo.jpg","api/index.js","components/Hours.js","components/Location.js","components/Tags.js","components/Spotlight.js","components/Time.js","components/Overview.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","api","axios","create","baseURL","apis","pipeBis","get","pipeAllBis","Hours","className","Location","Tags","Component","React","Overview","Table","columns","data","useState","filterInput","setFilterInput","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","value","onChange","e","target","undefined","placeholder","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isSorted","isSortedDesc","render","row","i","getRowProps","cells","cell","getCellProps","Categories","values","category","idx","key","App","useMemo","Header","accessor","Cell","href","setData","useEffect","a","result","console","log","HomePageHeader","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.279425ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spotlight-photo.3f85c38b.jpg\";","import axios from 'axios'\r\n\r\nconst host = 3000 || process.env.PORT;\r\n\r\nconst api = axios.create({\r\n    baseURL: `http://localhost:${host}/api`\r\n})\r\n\r\nexport const pipeBis = () => api.get(`/`)\r\nexport const pipeAllBis = () => api.get('/businesses')\r\n\r\nconst apis = {\r\n    pipeBis,\r\n    pipeAllBis\r\n}\r\n\r\nexport default apis","import React from \"react\";\r\nfunction Hours() {\r\n  return <div className=\"subtitle\">Hours: 11am - 9pm</div>;\r\n}\r\nexport default Hours;\r\n","import React from \"react\";\r\nfunction Location() {\r\n  return <div className=\"subtitle\">Location: Pittsburgh, PA</div>;\r\n}\r\nexport default Location;\r\n","import React from \"react\";\r\nfunction Tags() {\r\n  return <div className=\"subtitle\">Tags: food, corn</div>;\r\n}\r\nexport default Tags;\r\n","import React, {Component, Fragment} from \"react\";\r\nimport api from '../api'\r\nimport Hours from \"./Hours\";\r\nimport Location from \"./Location\";\r\nimport Tags from \"./Tags\";\r\nimport spotlightphoto from \"../assets/spotlight-photo.jpg\";\r\n\r\nimport \"./Spotlight.css\";\r\n\r\nclass Spotlight extends Component {\r\n  constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n          businesses: [],\r\n          isLoading: false,\r\n      }\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n      this.setState({ isLoading: true })\r\n\r\n      await api.pipeBis().then(businesses => {\r\n          this.setState({\r\n              businesses: businesses.data.data,\r\n              isLoading: false,\r\n          })\r\n      })\r\n  }\r\n\r\n  render() {\r\n      const { businesses } = this.state\r\n\r\n      return (\r\n        <div className=\"spotlight\">\r\n        <img src={spotlightphoto} className=\"spotlight-photo\" alt=\"spotlight\"/>\r\n        <div className=\"spotlight-body\">\r\n        {businesses.map((id)=>{\r\n            return (\r\n              <Fragment>\r\n                <h2>{id.firm_name}</h2> \r\n                <Location />\r\n                <Hours />\r\n                <div>\r\n                  <button><a href=\"google.com\">Visit Website</a></button>\r\n                </div>\r\n                <Tags />\r\n              </Fragment>\r\n            )\r\n        })}\r\n        </div>\r\n\r\n        <div className=\"scroll\">\r\n          <span>Dining</span>\r\n        </div>\r\n\r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default Spotlight;\r\n","import React from \"react\";\r\n\r\n// function Time(props) {\r\n// \treturn (<h1 className=\"time\">12:01</h1>);\r\n// }\r\nclass Time extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { date: new Date() };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date(),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let [month, date, year] = this.state.date\r\n      .toLocaleDateString(\"en-US\")\r\n      .split(\"/\");\r\n    return (\r\n      <div className=\"time\">\r\n        <h1>{this.state.date.toLocaleTimeString()}</h1>\r\n        <h2>\r\n          {month}/{date}/{year}\r\n        </h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Time;\r\n","import React from \"react\";\r\nimport Time from \"./Time\";\r\nimport Support from \"./Support\";\r\n\r\nimport \"./Overview.css\";\r\n\r\nfunction Overview(props) {\r\n  return (\r\n    <div className=\"overview\">\r\n      <Time />\r\n      <div className=\"overview-body\">\r\n        <Support />\r\n        <input type=\"text\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Overview;\r\n","import React, { useState } from \"react\";\r\nimport { useTable, useFilters, useSortBy } from \"react-table\";\r\n\r\n\r\nexport default function Table({ columns, data }) {\r\n  \r\n  const [filterInput, setFilterInput] = useState(\"\");\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    setFilter\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data\r\n    },\r\n    useFilters,\r\n    useSortBy\r\n  );\r\n\r\n  const handleFilterChange = e => {\r\n    const value = e.target.value || undefined;\r\n    setFilter(\"firm_name\", value);\r\n    setFilterInput(value);\r\n  };\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      <input\r\n        value={filterInput}\r\n        onChange={handleFilterChange}\r\n        placeholder={\"Search name\"}\r\n      />\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th\r\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                  className={\r\n                    column.isSorted\r\n                      ? column.isSortedDesc\r\n                        ? \"sort-desc\"\r\n                        : \"sort-asc\"\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  {column.render(\"Header\")}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n}\r\n","import React, { useMemo, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport api from './api'\r\n\r\nimport Spotlight from \"./components/Spotlight\";\r\nimport Overview from \"./components/Overview\";\r\nimport \"./App.css\";\r\n// import { getRandomPhotoURL } from \"./unsplash.js\";\r\n\r\nimport Table from \"./Table\";\r\n//import \"./App.css\";\r\n\r\nconst Categories = ({ values }) => {\r\n  return (\r\n    <>\r\n      {values.map((category, idx) => {\r\n        return (\r\n          <span key={idx} className=\"badge\">\r\n            {category}\r\n          </span>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n\r\nfunction App() {\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Business Details\",\r\n        columns: [\r\n          {\r\n            Header: \"Name\",\r\n            accessor: \"firm_name\"\r\n          },\r\n          {\r\n            Header: \"Categories\",\r\n            accessor: \"categories\",\r\n            Cell: ({ cell: { value } }) => <Categories values={value} />\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        Header: \"Info\",\r\n        columns: [\r\n          {\r\n            Header: \"Products\",\r\n            accessor: \"work_description\"\r\n          },\r\n          {\r\n            Header: \"Phone #\",\r\n            accessor: \"phone_number\"\r\n          },\r\n          {\r\n            Header: \"Address\",\r\n            accessor: \"physical_address\"\r\n          },\r\n          {\r\n            Header: \"Website\",\r\n            accessor: \"website\",\r\n            Cell: e =><a href={e.value}> {e.value} </a>\r\n            //Cell: ({ cell: { value } }) => <Genres values={value} />\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const result =  await api.pipeAllBis()//await axios(\"https://api.tvmaze.com/search/shows?q=snow\");\r\n      console.log(result)\r\n     // console.log(result.data)\r\n      setData(result.data.data);\r\n    })();\r\n  }, []);\r\n\r\n  const HomePageHeader = () => {\r\n    return (\r\n      <header className=\"header\">\r\n        <h2>PGH Keeps Tabs</h2>\r\n      </header>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <HomePageHeader />\r\n    <div className=\"App\">\r\n      <Table columns={columns} data={data} />\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}